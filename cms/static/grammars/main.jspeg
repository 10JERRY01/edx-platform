start
  = sections:(Image / 
              NumericalOrStringResponse / 
              NumericalResponse / 
              MultipleChoice / 
              Paragraph / 
              PreservedLinebreaks)+

/* Image */

ImageLink
  = DoubleQuotedString
  / chars:( (!')' [^\n])+)
    {
      return $.trim(chars.map(function(element) { return element[1]; }).join(""));
    }

ImageTitle
  = chars:( !'(' [^\n\[\]] )+
    {
      return $.trim(chars.map(function(element) { return element[1]; }).join(""));
    }

Image
  = ImageIdentifier title:ImageTitle? OptionalSpaces '(' OptionalSpaces url:ImageLink ')' OptionalSpaces Linebreak
    {
      return {'type': 'image', 'url': url, 'title': title};
    }

/* First character in a line as identifier */

ChoiceIdentifier
  = '(' parenthesized:[x ]? ')'
    {
      return parenthesized == 'x';
    }

ImageIdentifier
  = '!'

StudentProducedResponseIdentifier
  = '='

/* StringResponse */

StringResponse
  = StudentProducedResponseIdentifier OptionalSpaces !'(' value:Text Linebreak
    {
      return {'type': 'string', 'answer': $.trim(value)};
    }

NumericalOrStringResponse
  = StudentProducedResponseIdentifier OptionalSpaces value:NumericalValue OptionalSpaces tolerance:NumericalTolerance? OptionalSpaces Linebreak
    {
      if (tolerance == "")
        tolerance = "5%"
      return {'type': 'numerical', 'answer': value, 'tolerance': tolerance};
    }
  / StringResponse

/* MultipleChoice */

ChoiceTextLine
  = !ChoiceIdentifier line:Line
    {
      return line;
    }

Choice
  = correct:ChoiceIdentifier lines:(ChoiceTextLine)+
    {
      return {'type': 'choice', 'correct' : correct, 'text': lines.join("")};
    }

MultipleChoice
  = choices:Choice+
    {
      return {'type': 'multiple_choice', 'choices': choices};
    }

/* Paragraph */

ParagraphTextLine
  = !ImageIdentifier !ChoiceIdentifier !StudentProducedResponseIdentifier line:Line
    {
      return line;
    }

Paragraph
  = lines:ParagraphTextLine+
    {
      return {'type': 'paragraph', 'text': lines.join("")};
    }

/* Base symbols */

Line
  = text:Text terminator:Linebreak
    {
      return text + '\n';
    }

Text
  = chars:([^\n]+)
    {
      return chars.join("");
    }

OptionalSpacesAndLines
  = (' ' / '\n' / '\t')*

OptionalSpaces
  = (' ' / '\t')*

PreservedLinebreaks
  = terminators:('\n')+
  {
    return {'type': 'linebreaks', 'count': terminators.length}
  }

Linebreak
  = ('\n')

DoubleQuotedString
  = "\"\"" { return ""; }
  / "\"" str:(!UnescapedQuote .)* last:UnescapedQuote {
    return str.map(function(element) { return element[1]; }).join("") + last;
  }

UnescapedQuote
  = last:[^\\] "\"" {return last;}

AlphanumericalText
  = chars:[a-zA-Z0-9]+
  {
    return chars.join("");
  }

/* NumericalResponse */

NumericalToleranceValueType
  = decimal / percentage / integer

NumericalTolerance
  = '+-' OptionalSpaces value:NumericalToleranceValueType OptionalSpaces
    {
      return value;
    }

NumericalResponse
  = StudentProducedResponseIdentifier OptionalSpaces '(' OptionalSpaces value:NumericalValue OptionalSpaces tolerance:NumericalTolerance? ')' OptionalSpaces Linebreak
    {
      if (tolerance == "")
        tolerance = "5%"
      return {'type': 'numerical', 'answer': value, 'tolerance': tolerance};
    }

NumericalValue
  = additive

/* Mathematical rules */

additive
  = left:multiplicative "+" right:additive { return left + right; }
  / left:multiplicative "-" right:additive { return left - right; }
  / multiplicative

multiplicative
  = left:primary "*" right:multiplicative { return left * right; }
  / left:primary "/" right:multiplicative { return left / right; }
  / primary

primary
  = decimal
  / integer
  / "(" additive:additive ")" { return additive; }

decimal "decimal"
  = sign:[+-]? first:[0-9]* point:'.' last:[0-9]+
    { return parseFloat(sign + first.join("") + point + last.join("")); }

integer "integer"
  = sign:[+-]? digits:[0-9]+ { return parseInt(sign + digits.join(""), 10); }

percentage "percentage"
  = digits:[0-9]+ '%' { return parseInt(digits.join(""), 10) + '%'; }